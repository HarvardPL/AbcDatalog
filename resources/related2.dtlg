% At the end of the file are definitions of the predicates person(name) and parent_of(parent, child).


%% BEGIN ANSWER
% Define your rules here for the predicates siblings, related, same_generation, and unrelated. Hint, you may find it helpful to define additional relations, such as ancestor, etc.

% We will only grade your code between the "BEGIN ANSWER" and "END ANSWER" comments.

siblings(X,Y) :- X != Y, person(X), person(Y), parent_of(Z, X), parent_of(Z, Y).

ancestor(X,Y) :- person(X), person(Y), parent_of(X, Y).

ancestor(X,Z) :- person(X), person(Y), parent_of(X, Y), ancestor(Y,Z).


related(X,Y) :- ancestor(X, Y).
related(X,Y) :- ancestor(Y, X).
related(X,Y) :- siblings(X, Y).
related(X,Y) :- ancestor(Z, X), X != Y, ancestor(Z, Y).

same_generation(X,Y) :- parent_of(Z, X), parent_of(Z, Y), X != Y.
same_generation(X,Y) :- X != Y, same_generation(U,V), parent_of(U, X), parent_of(V, Y).

unrelated(X,Y) :- not related(X,Y), person(X), X != Y, person(Y).

check(X, Y) :- related(X, Y), unrelated(X, Y).

%% END ANSWER

person(adria).
person(barrett).
person(carson).
person(deidra).
person(eldon).
person(fern).
person(gonzalo).
person(harley).
person(ignacia).
person(kati).
person(lauretta).
person(mayra).
person(noe).
person(odell).
person(reanna).
person(sona).
person(terra).
person(ursula).
person(virgilio).

parent_of(adria, carson).
parent_of(barrett, carson).
parent_of(adria, deidra).
parent_of(barrett, deidra).
parent_of(deidra, eldon).
parent_of(deidra, fern).
parent_of(carson, gonzalo).
parent_of(carson, harley).

parent_of(ignacia, lauretta).
parent_of(kati, lauretta).
parent_of(lauretta, mayra).
parent_of(mayra, noe).
parent_of(mayra, odell).
parent_of(noe, reanna).
parent_of(noe, sona).
parent_of(odell, terra).
parent_of(odell, ursula).
parent_of(ursula, virgilio).